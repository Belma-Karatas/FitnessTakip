// src/components/Dashboard/Dashboard.jsx
import React, { useState, useEffect } from 'react';
import axiosInstance from '../../api/axiosInstance'; // Backend'e istek atmak iÃ§in
import './Dashboard.css';
import './TrainerDashboard.css'; // TrainerDashboard iÃ§in gerekli ise
import './ClientDashboard.css'; // ClientDashboard iÃ§in gerekli stiller
import ClientsList from './ClientsList'; // AntrenÃ¶r iÃ§in
import TrainerStatsCard from './TrainerStatsCard'; // AntrenÃ¶r iÃ§in
import ClientStatsCard from './ClientStatsCard'; // DanÄ±ÅŸan iÃ§in (bu component'i birazdan oluÅŸturacaÄŸÄ±z)
import { FaUsers, FaRunning, FaCalendarCheck, FaUtensils, FaBullseye } from 'react-icons/fa'; // AntrenÃ¶r ve DanÄ±ÅŸan iÃ§in ikonlar

function Dashboard({ userName, userRole }) {
    const [dashboardData, setDashboardData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchDashboardData = async () => {
            try {
                // Backend'den veriyi Ã§ekmek iÃ§in aynÄ± endpoint'i kullanacaÄŸÄ±z.
                // Backend, isteÄŸi yapan kullanÄ±cÄ±nÄ±n rolÃ¼ne gÃ¶re doÄŸru veriyi dÃ¶necek.
                const response = await axiosInstance.get('/dashboard');
                setDashboardData(response.data);
                console.log(`${userRole} Dashboard Data:`, response.data); // Rol bazlÄ± loglama
            } catch (err) {
                console.error(`${userRole} Dashboard verileri Ã§ekilirken hata:`, err);
                if (err.response) {
                    setError(err.response.data || `${userRole} dashboard verileri yÃ¼klenemedi.`);
                } else {
                    setError('Sunucuya baÄŸlanÄ±lamadÄ±.');
                }
            } finally {
                setLoading(false);
            }
        };

        fetchDashboardData();
    }, [userRole]); // userRole deÄŸiÅŸtiÄŸinde veya component ilk yÃ¼klendiÄŸinde Ã§alÄ±ÅŸsÄ±n

    // YÃ¼kleme durumu
    if (loading) {
        return <div className="dashboard-content-wrapper">YÃ¼kleniyor...</div>;
    }

    // Hata durumu
    if (error) {
        return <div className="dashboard-content-wrapper error-message">{error}</div>;
    }

    // Veri yoksa veya boÅŸsa
    if (!dashboardData) {
        // Hem antrenÃ¶r hem danÄ±ÅŸan iÃ§in boÅŸ veya null data durumunu yÃ¶net
        return (
            <div className="dashboard-content-wrapper">
                <div className="welcome-banner">
                    <div className="welcome-message-box">
                        <h1>ğŸ‘‹ HoÅŸ Geldiniz, {userName}!</h1>
                        <p>Dashboard verileri yÃ¼klenirken bir sorun oluÅŸtu.</p>
                    </div>
                </div>
            </div>
        );
    }

    // Ana render yapÄ±sÄ±
    return (
        <div className="dashboard-content-wrapper">
            <div className="welcome-banner">
                <div className="welcome-message-box">
                    <h1>ğŸ‘‹ HoÅŸ Geldiniz, {userName}!</h1> {/* Dinamik kullanÄ±cÄ± adÄ± */}
                    <p>
                        {userRole === 'Antrenor' ? 'DanÄ±ÅŸanlarÄ±nÄ±zÄ±n ilerlemesini ve genel istatistikleri gÃ¶rÃ¼ntÃ¼leyin.' : 'AntrenmanlarÄ±nÄ±zÄ± ve hedeflerinizi takip edin.'}
                    </p>
                </div>
            </div>

            {/* Rol bazlÄ± iÃ§erik gÃ¶sterme */}
            {userRole === 'Antrenor' && (
                <>
                    <div className="stats-grid">
                        <TrainerStatsCard title="Toplam DanÄ±ÅŸan" value={dashboardData.totalClients || 0} icon={<FaUsers />} />
                        <TrainerStatsCard title="Aktif DanÄ±ÅŸan (30 GÃ¼n)" value={dashboardData.activeClientsLast30Days || 0} icon={<FaRunning />} />
                        <TrainerStatsCard title="Yeni KayÄ±tlar (7 GÃ¼n)" value={dashboardData.newClientsLast7Days || 0} icon={<FaCalendarCheck />} />
                    </div>

                    <div className="clients-list-section">
                        <h2>DanÄ±ÅŸanlarÄ±m</h2>
                        {dashboardData.recentActiveClients && dashboardData.recentActiveClients.length > 0 ? (
                            <ClientsList clients={dashboardData.recentActiveClients} />
                        ) : (
                            <p>YakÄ±n zamanda antrenman yapan danÄ±ÅŸan bulunmuyor.</p>
                        )}
                    </div>
                </>
            )}

            {userRole === 'Danisan' && ( // DanÄ±ÅŸan rolÃ¼ iÃ§in
                <div className="client-dashboard-sections"> {/* DanÄ±ÅŸan bÃ¶lÃ¼mleri iÃ§in ana container */}
                    <h2>Genel BakÄ±ÅŸ</h2>
                    <div className="client-stats-grid">
                        {/* DanÄ±ÅŸan iÃ§in istatistik kartlarÄ± */}
                        <ClientStatsCard title="Toplam Antrenman" value={dashboardData.totalWorkouts || 0} icon={<FaRunning />} />
                        <ClientStatsCard title="Beslenme KayÄ±tlarÄ±" value={dashboardData.totalNutritionEntries || 0} icon={<FaUtensils />} />
                        <ClientStatsCard title="Tamamlanan Hedefler" value={dashboardData.completedGoals || 0} icon={<FaBullseye />} />
                    </div>

                    {/* Son Antrenman Ã–zeti */}
                    {dashboardData.lastWorkout ? (
                        <div className="summary-card last-workout-summary">
                            <h3>Son Antrenman</h3>
                            <p>Tarih: {new Date(dashboardData.lastWorkout.workoutDate).toLocaleDateString('tr-TR')}</p>
                            {dashboardData.lastWorkout.notes && <p>Notlar: {dashboardData.lastWorkout.notes}</p>}
                        </div>
                    ) : (
                        <div className="summary-card">
                            <h3>Son Antrenman</h3>
                            <p>HenÃ¼z antrenman kaydÄ±nÄ±z bulunmuyor.</p>
                        </div>
                    )}

                    {/* Hedef Ã–zeti */}
                    {dashboardData.currentGoal ? (
                        <div className="summary-card current-goal-summary">
                            <h3>Mevcut Hedef</h3>
                            <p>TÃ¼rÃ¼: {dashboardData.currentGoal.goalType}</p>
                            <p>Hedeflenen: {dashboardData.currentGoal.targetValue.toFixed(2)}</p>
                            <p>Mevcut: {dashboardData.currentGoal.currentValue.toFixed(2)}</p>
                            <p>BitiÅŸ: {new Date(dashboardData.currentGoal.endDate).toLocaleDateString('tr-TR')}</p>
                            <p>Durum: {dashboardData.currentGoal.isAchieved ? 'TamamlandÄ±' : 'Devam Ediyor'}</p>
                        </div>
                    ) : (
                        <div className="summary-card">
                            <h3>Hedefleriniz</h3>
                            <p>HenÃ¼z aktif bir hedefiniz bulunmuyor.</p>
                        </div>
                    )}

                    {/* AtanmÄ±ÅŸ AntrenÃ¶r */}
                    {dashboardData.assignedCoach ? (
                        <div className="summary-card assigned-coach-summary">
                            <h3>AntrenÃ¶rÃ¼nÃ¼z</h3>
                            <p>AdÄ±: {dashboardData.assignedCoach.coachFullName}</p>
                            <p>KullanÄ±cÄ± AdÄ±: {dashboardData.assignedCoach.coachUserName}</p>
                        </div>
                    ) : (
                        <div className="summary-card">
                            <h3>AntrenÃ¶rÃ¼nÃ¼z</h3>
                            <p>HenÃ¼z bir antrenÃ¶r atanmamÄ±ÅŸ.</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
}

export default Dashboard;