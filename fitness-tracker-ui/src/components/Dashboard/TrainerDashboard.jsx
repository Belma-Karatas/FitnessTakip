// src/components/Dashboard/TrainerDashboard.jsx
import React, { useState, useEffect } from 'react';
import axiosInstance from '../../api/axiosInstance'; // Backend'e istek atmak iÃ§in
import './Dashboard.css'; // Genel dashboard stilleri
import './TrainerDashboard.css'; // Trainer Dashboard'a Ã¶zel stiller
import ClientsList from './ClientsList'; // Mevcut ClientsList component'ini kullanacaÄŸÄ±z
import TrainerStatsCard from './TrainerStatsCard'; // Yeni istatistik kartÄ± component'i
import { FaUsers, FaRunning, FaCalendarCheck } from 'react-icons/fa'; // Ä°konlar

function TrainerDashboard() {
    const [dashboardData, setDashboardData] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchDashboardData = async () => {
            try {
                const response = await axiosInstance.get('/dashboard'); // Backend'deki endpoint'imiz
                setDashboardData(response.data);
                console.log("Trainer Dashboard Data:", response.data); // Gelen veriyi konsola yazdÄ±r
            } catch (err) {
                console.error("Trainer Dashboard verileri Ã§ekilirken hata:", err);
                if (err.response) {
                    setError(err.response.data || 'Veriler yÃ¼klenemedi.');
                } else {
                    setError('Sunucuya baÄŸlanÄ±lamadÄ±.');
                }
            } finally {
                setLoading(false);
            }
        };

        fetchDashboardData();
    }, []);

    if (loading) {
        return <div className="dashboard-content-wrapper">YÃ¼kleniyor...</div>;
    }

    if (error) {
        return <div className="dashboard-content-wrapper error-message">{error}</div>;
    }

    // EÄŸer dashboardData null ise veya beklenen yapÄ±da deÄŸilse
    if (!dashboardData) {
        return <div className="dashboard-content-wrapper">Veri bulunamadÄ±.</div>;
    }

    return (
        <div className="dashboard-content-wrapper trainer-dashboard">
            <div className="welcome-banner">
                <div className="welcome-message-box">
                    <h1>ğŸ‘‹ HoÅŸ Geldiniz AntrenÃ¶r!</h1>
                    <p>DanÄ±ÅŸanlarÄ±nÄ±zÄ±n ilerlemesini ve genel istatistikleri gÃ¶rÃ¼ntÃ¼leyin.</p>
                </div>
            </div>

            <div className="stats-grid">
                <TrainerStatsCard title="Toplam DanÄ±ÅŸan" value={dashboardData.totalClients} icon={<FaUsers />} />
                <TrainerStatsCard title="Aktif DanÄ±ÅŸan (30 GÃ¼n)" value={dashboardData.activeClientsLast30Days} icon={<FaRunning />} />
                <TrainerStatsCard title="Yeni KayÄ±tlar (7 GÃ¼n)" value={dashboardData.newClientsLast7Days} icon={<FaCalendarCheck />} />
            </div>

            <div className="clients-list-section">
                <h2>Son Aktif DanÄ±ÅŸanlar</h2>
                {dashboardData.recentActiveClients && dashboardData.recentActiveClients.length > 0 ? (
                    <ClientsList clients={dashboardData.recentActiveClients} />
                ) : (
                    <p>YakÄ±n zamanda antrenman yapan danÄ±ÅŸan bulunmuyor.</p>
                )}
            </div>
        </div>
    );
}

export default TrainerDashboard;